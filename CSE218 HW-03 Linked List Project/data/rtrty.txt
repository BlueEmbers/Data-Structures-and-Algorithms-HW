package p3;

import java.util.Collections;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;

public class MyFlightPane {
	
	private PriorityQueue queue;
	private Button insertFlight;
	private Button removeFlight;
	private TextField airlineField;
	private TextField flightNumberField;
	private ComboBox<Integer> flightPriorityComboBox;
	private ComboBox<Integer> timeStampHoursComboBox;
	private ComboBox<Integer> timeStampMinutesComboBox;
	private ObservableList<Integer> priorityLevel;
	private ObservableList<Integer> hours;
	private ObservableList<Integer> minutes;
	private ObservableList<Flight>flightsList;
	private ListView<Flight> flightView;
	private GridPane pane;
	private Label flightPriorityLabel;
	private Label flightTimeLabel;
	
	public MyFlightPane(PriorityQueue queue) {
		super();
		this.queue = queue;
		this.airlineField = new TextField();
		this.airlineField.setPromptText("Airline");
		this.flightNumberField = new TextField();
		this.flightNumberField.setPromptText("Flight Number");
		this.pane = new GridPane();
		this.pane.setHgap(30);
		this.pane.setVgap(20);
		this.pane.setPadding(new Insets(40));
		this.pane.setMaxSize(30, 30);
		this.insertFlight = new Button("Insert Flight");
		this.removeFlight = new Button("Land Flight");
		this.priorityLevel = FXCollections.observableArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		this.hours = FXCollections.observableArrayList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
		this.minutes = FXCollections.observableArrayList(00, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
				24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
				47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59);
		this.flightPriorityComboBox = new ComboBox<Integer>(priorityLevel);
		this.timeStampHoursComboBox = new ComboBox<Integer>(hours);
		this.timeStampMinutesComboBox = new ComboBox<Integer>(minutes);
		this.flightsList = FXCollections.observableArrayList(this.queue.getFlights());
		this.flightView = new ListView<Flight>(this.flightsList);
		this.flightPriorityLabel = new Label("Flight Priority:");
		this.flightTimeLabel = new Label("Flight Time Stamp:");
		this.pane.add(airlineField, 1, 1);
		this.pane.add(flightNumberField, 1, 2);
		this.pane.add(flightPriorityLabel, 1, 3);
		this.pane.add(flightPriorityComboBox, 1, 4);
		this.pane.add(flightTimeLabel, 1, 5);
		this.pane.add(timeStampHoursComboBox, 2, 5);
		this.pane.add(timeStampMinutesComboBox, 3, 5);
		this.pane.add(insertFlight, 1, 6);
		this.pane.add(removeFlight, 1, 7);
		
		this.insertFlight.setOnAction(e -> {
			this.queue.insert(new Flight(this.airlineField.getText(), this.flightNumberField.getText(), this.flightPriorityComboBox.getValue(), 
					((this.timeStampHoursComboBox.getValue()*100) + this.timeStampMinutesComboBox.getValue())));
			this.flightsList = FXCollections.observableArrayList(this.queue.getFlights());
			this.flightView = new ListView<Flight>(this.flightsList);
			this.pane.getChildren().remove(flightView);
			this.pane.add(flightView, 4, 1);
			this.airlineField.clear();
			this.flightNumberField.clear();
		});
		
		this.removeFlight.setOnAction(e-> {
			if(this.queue.isEmpty()) {
				System.out.println("No flights currently in queue.");
				this.flightsList = FXCollections.observableArrayList(this.queue.getFlights());
				this.flightView = new ListView<Flight>(this.flightsList);
				this.pane.add(flightView, 4, 1);
			}else {
			System.out.println(this.queue.remove());
			}
			this.pane.getChildren().remove(flightView);
			this.flightsList = FXCollections.observableArrayList(this.queue.getFlights());
			this.flightView = new ListView<Flight>(this.flightsList);
			this.pane.add(flightView, 4, 1);
		});
		
	}

	public PriorityQueue getQueue() {
		return queue;
	}

	public void setQueue(PriorityQueue queue) {
		this.queue = queue;
	}

	public Button getInsertFlight() {
		return insertFlight;
	}

	public void setInsertFlight(Button insertFlight) {
		this.insertFlight = insertFlight;
	}

	public Button getRemoveFlight() {
		return removeFlight;
	}

	public void setRemoveFlight(Button removeFlight) {
		this.removeFlight = removeFlight;
	}

	public TextField getAirlineField() {
		return airlineField;
	}

	public void setAirlineField(TextField airlineField) {
		this.airlineField = airlineField;
	}

	public TextField getFlightNumberField() {
		return flightNumberField;
	}

	public void setFlightNumberField(TextField flightNumberField) {
		this.flightNumberField = flightNumberField;
	}

	public ComboBox<Integer> getFlightPriorityComboBox() {
		return flightPriorityComboBox;
	}

	public void setFlightPriorityComboBox(ComboBox<Integer> flightPriorityComboBox) {
		this.flightPriorityComboBox = flightPriorityComboBox;
	}

	public ComboBox<Integer> getTimeStampHoursComboBox() {
		return timeStampHoursComboBox;
	}

	public void setTimeStampHoursComboBox(ComboBox<Integer> timeStampHoursComboBox) {
		this.timeStampHoursComboBox = timeStampHoursComboBox;
	}

	public ComboBox<Integer> getTimeStampMinutesComboBox() {
		return timeStampMinutesComboBox;
	}

	public void setTimeStampMinutesComboBox(ComboBox<Integer> timeStampMinutesComboBox) {
		this.timeStampMinutesComboBox = timeStampMinutesComboBox;
	}

	public ObservableList<Integer> getPriorityLevel() {
		return priorityLevel;
	}

	public void setPriorityLevel(ObservableList<Integer> priorityLevel) {
		this.priorityLevel = priorityLevel;
	}

	public ObservableList<Integer> getHours() {
		return hours;
	}

	public void setHours(ObservableList<Integer> hours) {
		this.hours = hours;
	}

	public ObservableList<Integer> getMinutes() {
		return minutes;
	}

	public void setMinutes(ObservableList<Integer> minutes) {
		this.minutes = minutes;
	}

	public ObservableList<Flight> getFlightsList() {
		return flightsList;
	}

	public void setFlightsList(ObservableList<Flight> flightsList) {
		this.flightsList = flightsList;
	}

	public ListView<Flight> getFlightView() {
		return flightView;
	}

	public void setFlightView(ListView<Flight> flightView) {
		this.flightView = flightView;
	}

	public GridPane getPane() {
		return pane;
	}

	public void setPane(GridPane pane) {
		this.pane = pane;
	}

	public Label getFlightPriorityLabel() {
		return flightPriorityLabel;
	}

	public void setFlightPriorityLabel(Label flightPriorityLabel) {
		this.flightPriorityLabel = flightPriorityLabel;
	}

	public Label getFlightTimeLabel() {
		return flightTimeLabel;
	}

	public void setFlightTimeLabel(Label flightTimeLabel) {
		this.flightTimeLabel = flightTimeLabel;
	}

}
